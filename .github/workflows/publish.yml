name: Publish to Production
on: [workflow_dispatch]
jobs:
  build:
    runs-on: ubuntu-latest
    name: Build project
    
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main

      - uses: actions/setup-node@v3
        with: 
          node-version: "latest"    
        
      - name: Checkout, NodeJS install & cleanup project
        env:
          DOTENV_PASS: ${{ secrets.DOTENV_PASS }}
        run: |
          npm install senv -g
          npm run env:decrypt
          rm -rf node_modules
          rm -rf package.json
          rm -rf package-lock.json
          rm -rf tasks
          rm -rf .github
          rm -rf .gitignore
          rm -rf .git
          rm -rf publish.yml
          sed "s/NODE=development/NODE=production/g" $(pwd)/Docker/dev/.env > $(pwd)/Docker/dev/.envNew
          rm -rf $(pwd)/Docker/prod/.env
          mv $(pwd)/Docker/dev/.envNew $(pwd)/Docker/prod/.env
          mv $(pwd)/Docker/dev/mongod.conf $(pwd)/Docker/prod/mongod.conf
          rm -rf $(pwd)/Docker/dev
          mv $(pwd)/Docker/prod/.env $(pwd)/.env
          mv $(pwd)/Docker/prod/Dockerfile $(pwd)/Dockerfile
          mv $(pwd)/Docker/prod/docker-compose.yml $(pwd)/docker-compose.yml
          mv $(pwd)/Docker/prod/init-mongo.js $(pwd)/init-mongo.js
          mv $(pwd)/Docker/prod/mongod.conf $(pwd)/mongod.conf
          rm -rf $(pwd)/Docker/prod
          ls -la
      - name: Build Docker image and push to registry
        env:
          GITHUBTOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          docker login ghcr.io -u $GITHUB_ACTOR -p $GITHUBTOKEN
          docker build . --tag ghcr.io/yousef-hassani/lock-hub.com:latest
          docker push ghcr.io/yousef-hassani/lock-hub.com:latest  

  deploy:
      needs: build
      runs-on: ubuntu-latest
      name: Deploy to production

      steps:
      - uses: actions/checkout@v3
        with:
          ref: main

      - uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.PRIVATE_KEY }} 
          known_hosts: '|1|BoU/ABheReuHeoSVx863Mlc5EyI=|+3LltIA4uP2evLUf7u+oRZE4d3w= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDFD/FE160kdKnqo0kkE6oQY1aeQEpnGI/ap30YVjDASh4z0KU6wjNj5v/pAiMIZiy5BFmwoA/KpyoLbmJtREOexB1F6NwPmQQHtKJ1qBcqj/INHM6M4tYyzTID3d6JkpO11Twn4w+P4cLWDcM9hl9Q5N4srmSTEczI5QqtUlw3ZAgUz0ILyvZPX7qfyndlKQqV9VQBBEjfvbrV9YPTPXTnFB/aEEuPofeMupYmuIRB+5L2SNqWUFg07tJMSaJQdVb7v+ALdZ6IkzlyHLf03vcbdS2QJ2U8Hh/4jL7Dd2m0AhqlA2dLn+IZvccP/VINVvfA3o51mVRHlCUt0JcZe25w3YHto9KHRI6LHSLiYFru6kmJ0HJCAlbxHeIg3CJuhFOJh5HqqTjJZXWjWvfdrc5aUbOK5fItRPP774u3RK9+/dSPbVJUb5aO7gfr8D9awWzE9yrYYrheG9r5Lcl8pMgo4Sl6kH+5K713neuydZu33lpN205mqskDDktp4MCDaRM='   

      - name: SSH connect to production, and docker image installation
        env:
          DOTENV_PASS: ${{ secrets.DOTENV_PASS }}
          SSH_PASS: ${{ secrets.SSH_PASS }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_HOSTNAME: ${{ secrets.SSH_HOSTNAME }}
          GITHUBTOKEN: ${{ secrets.GH_TOKEN }}
          PRIVATEKEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          sudo apt-get update -y
          sudo apt-get install sshpass
          sudo apt-get install -y rsync
          
          # Umgebung vorbereiten
          npm install senv -g
          npm run env:decrypt
          rm -rf node_modules
          rm -rf package.json
          rm -rf package-lock.json
          rm -rf tasks
          rm -rf .github
          rm -rf .gitignore
          rm -rf .git
          rm -rf publish.yml
          sed "s/NODE=development/NODE=production/g" $(pwd)/Docker/dev/.env > $(pwd)/Docker/dev/.envNew
          rm -rf $(pwd)/Docker/prod/.env
          mv $(pwd)/Docker/dev/.envNew $(pwd)/Docker/prod/.env
          mv $(pwd)/Docker/dev/mongod.conf $(pwd)/Docker/prod/mongod.conf
          rm -rf $(pwd)/Docker/dev
          mv $(pwd)/Docker/prod/.env $(pwd)/.env
          mv $(pwd)/Docker/prod/Dockerfile $(pwd)/Dockerfile
          mv $(pwd)/Docker/prod/docker-compose.yml $(pwd)/docker-compose.yml
          mv $(pwd)/Docker/prod/init-mongo.js $(pwd)/init-mongo.js
          mv $(pwd)/Docker/prod/mongod.conf $(pwd)/mongod.conf
          rm -rf $(pwd)/Docker/prod
          ls -la

          # Dateien per rsync Ã¼bertragen
          rsync -avz ./.env ./docker-compose.yml ./init-mongo.js ./mongod.conf $SSH_USER@$SSH_HOST:/var/www/vhosts/$SSH_HOSTNAME/httpdocs/

          sshpass -p $SSH_PASS ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST <<EOF
            cd /var/www/vhosts/$SSH_HOSTNAME/httpdocs
            docker-compose -p lockhub down --remove-orphans || true
            docker network create ntwork || true
            docker login ghcr.io -u $GITHUB_ACTOR -p $GITHUBTOKEN
            docker-compose -p lockhub pull
            docker-compose -p lockhub up -d --remove-orphans
            docker image prune -f
            exit
          EOF          